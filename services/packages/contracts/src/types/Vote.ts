/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Vote {
  export type ProposalStruct = {
    name: string;
    description: string;
    abstainVotes: BigNumberish;
    yesVotes: BigNumberish;
    noVotes: BigNumberish;
    proposer: string;
  };

  export type ProposalStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    name: string;
    description: string;
    abstainVotes: BigNumber;
    yesVotes: BigNumber;
    noVotes: BigNumber;
    proposer: string;
  };
}

export interface VoteInterface extends utils.Interface {
  functions: {
    "getAllProposals()": FunctionFragment;
    "hasVoted(uint256,address)": FunctionFragment;
    "proposalIndex()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "propose(string,string)": FunctionFragment;
    "vote(uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAllProposals"
      | "hasVoted"
      | "proposalIndex"
      | "proposals"
      | "propose"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {};
}

export interface Vote extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VoteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllProposals(
      overrides?: CallOverrides
    ): Promise<[Vote.ProposalStructOutput[]]>;

    hasVoted(
      index: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proposalIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, string] & {
        name: string;
        description: string;
        abstainVotes: BigNumber;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        proposer: string;
      }
    >;

    propose(
      proposalName: string,
      description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vote(
      index: BigNumberish,
      voteType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getAllProposals(
    overrides?: CallOverrides
  ): Promise<Vote.ProposalStructOutput[]>;

  hasVoted(
    index: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, string] & {
      name: string;
      description: string;
      abstainVotes: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      proposer: string;
    }
  >;

  propose(
    proposalName: string,
    description: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vote(
    index: BigNumberish,
    voteType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllProposals(
      overrides?: CallOverrides
    ): Promise<Vote.ProposalStructOutput[]>;

    hasVoted(
      index: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, string] & {
        name: string;
        description: string;
        abstainVotes: BigNumber;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        proposer: string;
      }
    >;

    propose(
      proposalName: string,
      description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      index: BigNumberish,
      voteType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAllProposals(overrides?: CallOverrides): Promise<BigNumber>;

    hasVoted(
      index: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      proposalName: string,
      description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vote(
      index: BigNumberish,
      voteType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllProposals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasVoted(
      index: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      proposalName: string,
      description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vote(
      index: BigNumberish,
      voteType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
